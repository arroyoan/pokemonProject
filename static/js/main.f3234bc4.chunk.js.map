{"version":3,"sources":["img/logo.png","img/spinner.gif","components/ui/Header.js","components/characters/CharacterItem.js","components/ui/Spinner.js","components/characters/CharacterGrid.js","App.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","CharacterItem","item","useState","setCharacter","picUrl","setPicUrl","pokeType","setPokeType","abilities","setAbilities","pokeName","setPokeName","pokeHeightFeet","setHeightFeet","pokeHeightInch","setHeightInch","useEffect","camelCase","word","charAt","toUpperCase","slice","getTypes","charResult","i","types","strTypes","numTypes","length","typeName","type","name","getAbilities","strAbil","numAbil","abilName","ability","getHeight","heightInch","height","heightFeet","a","axios","url","result","data","id","fetchCharacter","Spinner","spinner","style","width","margin","display","CharacterGrid","items","isLoading","results","map","key","App","setItems","setIsLoading","fetchItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,4MCW5BC,EARA,WACX,OACI,4BAAQC,UAAU,UACd,yBAAKC,IAAKC,IAAMC,IAAI,GAAGH,UAAU,eC+H9BI,EAlIO,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAAU,EACIC,mBAAS,IADb,mBACZC,GADY,aAEFD,mBAAS,IAFP,mBAEvBE,EAFuB,KAEfC,EAFe,OAGEH,mBAAS,IAHX,mBAGvBI,EAHuB,KAGbC,EAHa,OAIIL,mBAAS,IAJb,mBAIvBM,EAJuB,KAIZC,EAJY,OAKEP,mBAAS,IALX,mBAKvBQ,EALuB,KAKbC,EALa,OAMST,mBAAS,IANlB,mBAMvBU,EANuB,KAMPC,EANO,OAOSX,mBAAS,IAPlB,mBAOvBY,EAPuB,KAOPC,EAPO,KAgH9B,OAvGAC,qBAAW,WAEP,IAAMC,EAAY,SAACC,GAGf,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,IAG/CC,EAAW,SAACC,GAEd,IAOIC,EAPEC,EAAQF,EAAU,MAGpBG,EAAU,GAEVC,EAASF,EAAMG,OAKnB,IAAIJ,EAAK,EAAGA,EAAGG,EAASH,IAAI,CACxB,IAAIK,EAASJ,EAAMD,GAAGM,KAAKC,KAEvBL,GADDF,EAAGG,EAAS,EACAV,EAAUY,GAAW,KAEtBZ,EAAUY,GAG5BtB,EAAYmB,IAIVM,EAAe,SAACT,GAElB,IAOIC,EAPEhB,EAAYe,EAAU,UAGxBU,EAAS,GAETC,EAAQ1B,EAAUoB,OAKtB,IAAIJ,EAAK,EAAGA,EAAGU,EAAQV,IAAI,CACvB,IAAIW,EAAS3B,EAAUgB,GAAGY,QAAQL,KAE9BE,GADDT,EAAGU,EAAQ,EACAjB,EAAUkB,GAAW,KAEtBlB,EAAUkB,GAI3B1B,EAAawB,IAGXI,EAAY,SAACd,GAEf,IAAIe,EAAkC,MAApBf,EAAWgB,OAGzBC,EAAcF,EAAW,GAAI,EAGjCA,EAAcA,EAAwB,GAAXE,EAAe,EAG1C3B,EAAc2B,GAGdzB,EAAcuB,KAGE,uCAAG,4BAAAG,EAAA,sEAEGC,IAAM,GAAD,OAAIzC,EAAK0C,MAFjB,OAEbC,EAFa,OAMnBtB,EAASsB,EAAOC,MAGhBb,EAAaY,EAAOC,MAGpBR,EAAUO,EAAOC,MAIjB1C,EAAayC,EAAOC,MAGpBlC,EAAYM,EAAU2B,EAAOC,KAAKd,OAIlC1B,EAAU,iDAAD,OAAkDuC,EAAOC,KAAKC,GAA9D,SAvBU,2CAAH,qDA2BpBC,KACF,IAGF,yBAAKnD,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,cACX,yBAAKC,IAAKO,EAAQL,IAAI,GAAGH,UAAU,gBAEvC,yBAAKA,UAAU,aACX,4BAAKc,GACL,6BACA,2BAAG,wCAAH,KAA2BJ,GAC3B,2BAAG,0CAAH,KAA6BM,EAA7B,KAA+CE,EAA/C,KACA,2BAAG,6CAAH,KAAgCN,EAAhC,S,iBCjHDwC,EAVC,WACZ,OACI,yBACEnD,IAAKoD,IACLC,MAAO,CAACC,MAAO,QAASC,OAAQ,OAAQC,QAAQ,SAChDtD,IAAI,gBCICuD,EARO,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MACpB,OADyC,EAAfC,UACN,kBAAC,EAAD,MAAe,6BAAS5D,UAAU,SACjD2D,EAAME,QAAQC,KAAI,SAACzD,GAAD,OACf,kBAAC,EAAD,CAAe0D,IAAK1D,EAAK8B,KAAM9B,KAAMA,SCsBlC2D,MAvBf,WAAgB,IAAD,EACa1D,mBAAS,IADtB,mBACNqD,EADM,KACCM,EADD,OAEqB3D,oBAAS,GAF9B,mBAENsD,EAFM,KAEKM,EAFL,KAeb,OAXA9C,qBAAW,YACO,uCAAG,4BAAAyB,EAAA,sEACIC,IAAM,gDADV,OACXE,EADW,OAIjBiB,EAASjB,EAAOC,MAChBiB,GAAa,GALI,2CAAH,qDAOhBC,KACA,IAGA,yBAAKnE,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAe4D,UAAWA,EAAWD,MAAOA,MCpBlDS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f3234bc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.55eae3f2.png\";","module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react'\r\nimport logo from '../../img/logo.png'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className='center'>\r\n            <img src={logo} alt='' className='pokeLogo' />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nconst CharacterItem = ({item}) => {\r\n    const [character, setCharacter] = useState('');\r\n    const [picUrl, setPicUrl] = useState('');\r\n    const [pokeType, setPokeType] = useState('');\r\n    const [abilities, setAbilities] = useState('');\r\n    const [pokeName, setPokeName] = useState('');\r\n    const [pokeHeightFeet, setHeightFeet] =useState('');\r\n    const [pokeHeightInch, setHeightInch] =useState('');\r\n\r\n    useEffect (() => {\r\n        //this captilizes the first letter\r\n        const camelCase = (word) => {\r\n            //gets the first letter and capitilizes it\r\n            //then it adds it to slice of the rest of the word\r\n            return word.charAt(0).toUpperCase() + word.slice(1);\r\n        }\r\n\r\n        const getTypes = (charResult) => {\r\n            //this gets the types json info\r\n            const types = charResult['types'];\r\n\r\n            //this makes an empty string where the formatted data will be placed\r\n            var strTypes= '';\r\n            //this gets the length of the json so only called once\r\n            var numTypes=types.length\r\n            \r\n            var i;\r\n\r\n            //will iterate through and get all types\r\n            for(i  = 0; i< numTypes;i++){\r\n                var typeName=types[i].type.name\r\n                if(i<(numTypes-1))\r\n                    strTypes+=(camelCase(typeName) +', ');\r\n                else\r\n                    strTypes+=camelCase(typeName);\r\n            }\r\n            //sets the type in the useState\r\n            setPokeType(strTypes);\r\n\r\n        }\r\n\r\n        const getAbilities = (charResult) => {\r\n            //this gets the abilities json info\r\n            const abilities = charResult['abilities'];\r\n\r\n            //this makes an empty string where the formatted data will be placed\r\n            var strAbil= '';\r\n            //this gets the length of the json so only called once\r\n            var numAbil=abilities.length\r\n            \r\n            var i;\r\n\r\n            //will iterate through and get all types\r\n            for(i  = 0; i< numAbil;i++){\r\n                var abilName=abilities[i].ability.name\r\n                if(i<(numAbil-1))\r\n                    strAbil+=(camelCase(abilName) +', ');\r\n                else\r\n                    strAbil+=camelCase(abilName);\r\n            }\r\n\r\n            //sets the type in the useState\r\n            setAbilities(strAbil);\r\n        }\r\n\r\n        const getHeight = (charResult) => {\r\n            // this multiply the height by 3.937 to convert to inches\r\n            var heightInch = (charResult.height * 3.937);\r\n\r\n            //this multiplies gets the height in feet\r\n            var heightFeet = (heightInch/12)|0;\r\n\r\n            //this gets the remaining inches and truncates the decimal off\r\n            heightInch = (heightInch - heightFeet*12)|0;\r\n            \r\n            //sets the feet in the state\r\n            setHeightFeet(heightFeet);\r\n\r\n            //sets the height in inches\r\n            setHeightInch(heightInch);\r\n        }\r\n\r\n        const fetchCharacter = async () => {\r\n            //this uses axios to make the api call to the pokeapi\r\n            const result  = await axios(`${item.url}`);\r\n\r\n            //this parses calls a helper functions that parses the type of pokemon\r\n            // from the json returned\r\n            getTypes(result.data);\r\n\r\n            //this gets the abilities from json\r\n            getAbilities(result.data);\r\n\r\n            //this gets turns the height from decimetere to feet\r\n            getHeight(result.data);\r\n\r\n            //this gets the character information and stores in the useState\r\n            //to be used later\r\n            setCharacter(result.data);\r\n\r\n            //this capitlizes the first name of the pokemon\r\n            setPokeName(camelCase(result.data.name))\r\n\r\n            //this calls the a second api that gets the picture to display as\r\n            //the card front\r\n            setPicUrl(`https://pokeres.bastionbot.org/images/pokemon/${result.data.id}.png`);\r\n        }\r\n\r\n        //this calls the function above that gets all the necessary character info\r\n        fetchCharacter();\r\n    },[])\r\n\r\n    return (\r\n    <div className='card'>\r\n        <div className='card-inner'>\r\n            <div className='card-front'>\r\n                <img src={picUrl} alt='' className='card-image' />\r\n            </div>\r\n            <div className='card-back'>\r\n                <h1>{pokeName}</h1>\r\n                <hr></hr>\r\n                <p><strong>Type</strong>: {pokeType}</p>\r\n                <p><strong>Height</strong>: {pokeHeightFeet}' {pokeHeightInch}\"</p>\r\n                <p><strong>Abilities</strong>: {abilities} </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CharacterItem","import React from 'react'\r\nimport spinner from '../../img/spinner.gif'\r\n\r\nconst Spinner = () =>{\r\n    return(\r\n        <img \r\n          src={spinner}\r\n          style={{width: '200px', margin: 'auto', display:'block'}}\r\n          alt='Loading...'\r\n        />\r\n    )\r\n}\r\n\r\nexport default Spinner","import React from 'react'\r\nimport CharacterItem from './CharacterItem'\r\nimport Spinner from '../ui/Spinner'\r\n\r\nconst CharacterGrid = ({items,isLoading}) => {\r\n    return isLoading ? (<Spinner/>) : (<section className='cards'>\r\n        {items.results.map((item) =>(\r\n            <CharacterItem key={item.name} item={item}></CharacterItem>\r\n        ))}\r\n    </section>)\r\n}\r\n\r\nexport default CharacterGrid","import React, {useState,useEffect} from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport Header from './components/ui/Header';\nimport CharacterGrid from './components/characters/CharacterGrid';\n\nfunction App() {\n  const [items, setItems] = useState('')\n  const [isLoading, setIsLoading] = useState(true)\n\n  useEffect (()=>{\n    const fetchItems = async () => {\n      const result = await axios(`https://pokeapi.co/api/v2/pokemon/?limit=151`)\n\n      //console.log(result.data)\n      setItems(result.data)\n      setIsLoading(false)\n    }\n    fetchItems()\n  },[])\n\n  return (\n    <div className=\"container\">\n      <Header />\n      <CharacterGrid isLoading={isLoading} items={items}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}